// axios配置  可自行根据项目进行更改，只需更改该文件即可，其他文件可以不动
// The axios configuration can be changed according to the project, just change the file, other files can be left unchanged

import type { AxiosResponse } from 'axios';
import type { RequestOptions, Result } from '../../../../types/axios';
import type { AxiosTransform, CreateAxiosOptions } from './axiosTransform';
import { VAxios } from './Axios';
import { useGlobSetting } from '@/hooks/setting';
import { RequestEnum, ContentTypeEnum } from '@/enums/httpEnum';
import { isString } from '@/utils/is';
import { getToken } from '@/utils/auth';
import { setObjToUrlParams, deepMerge } from '@/utils';
import { useErrorLogStoreWithOut } from '@/store/modules/errorLog';
import { joinTimestamp, formatRequestDate, isRequestCanceled } from './helper';

// element-ui
import { ElNotification, ElMessageBox } from 'element-plus';
import { useLoading } from '@/hooks/elementPlus/useLoading';
import { error as ElError } from '@/hooks/elementPlus/useMessage';
import { clearAuthCache } from '@/utils/auth';

import NProgress from 'nprogress';
const [openLoading, closeLoading] = useLoading();

const globSetting = useGlobSetting();
const urlPrefix = globSetting.urlPrefix;

/**
 * @description: 数据处理，方便区分多种处理方式
 */
const transform: AxiosTransform = {
  /**
   * @description: 处理请求数据。如果数据不是预期格式，可直接抛出错误
   */
  transformRequestHook: (res: AxiosResponse<Result>, options: RequestOptions) => {
    const { isTransformResponse, isReturnNativeResponse } = options;

    // 是否返回原生响应头 比如：需要获取响应头时使用该属性
    if (isReturnNativeResponse) {
      closeLoading();
      return res;
    }
    // 不进行任何处理，直接返回
    // 用于页面代码可能需要直接获取code，data，message这些信息时开启
    if (!isTransformResponse) {
      closeLoading();
      return res.data;
    }

    // 错误的时候返回
    const { data } = res || {};
    if (!data && data !== 0) {
      // return '[HTTP] Request has no return value';
      ElError('[HTTP] Request has no return value');
      throw new Error('request error');
    }

    closeLoading();
    return data;
  },

  // 请求之前处理config
  beforeRequestHook: (config, options) => {
    const { apiUrl, joinPrefix, joinParamsToUrl, formatDate, joinTime = true } = options;

    if (joinPrefix) {
      config.url = `${urlPrefix}${config.url}`;
    }

    if (apiUrl && isString(apiUrl)) {
      config.url = `${apiUrl}${config.url}`;
    }

    const params = config.params || {};
    const data = config.data || false;
    formatDate && data && !isString(data) && formatRequestDate(data);
    if (config.method?.toUpperCase() === RequestEnum.GET) {
      if (!isString(params)) {
        // 给 get 请求加上时间戳参数，避免从缓存中拿数据。
        config.params = Object.assign(params || {}, joinTimestamp(joinTime, false));
      } else {
        // 兼容restful风格
        config.url = config.url + params + `${joinTimestamp(joinTime, true)}`;
        config.params = undefined;
      }
    } else {
      if (!isString(params)) {
        formatDate && formatRequestDate(params);
        if (Reflect.has(config, 'data') && config.data && Object.keys(config.data).length > 0) {
          config.data = data;
          config.params = params;
        } else {
          // 非GET请求如果没有提供data，则将params视为data
          config.data = params;
          config.params = undefined;
        }
        if (joinParamsToUrl) {
          config.url = setObjToUrlParams(config.url as string, Object.assign({}, config.params, config.data));
        }
      } else {
        // 兼容restful风格
        config.url = config.url + params;
        config.params = undefined;
      }
    }
    return config;
  },

  /**
   * @description: 请求拦截器处理
   */
  requestInterceptors: (config, options) => {
    // 请求之前处理config

    if ((config as Recordable)?.withLoading !== false) {
      openLoading();
    }
    const token = getToken();
    if (token && (config as Recordable)?.requestOptions?.withToken !== false) {
      config.headers['Authorization'] = 'Motern ' + token;
    }

    config.headers['Xi-App-Id'] = options.appId;
    return config;
  },

  /**
   * @description: 响应拦截器处理
   */
  responseInterceptors: (res: AxiosResponse<any>) => {
    const requestOptions: RequestOptions = (res?.config as CreateAxiosOptions)?.requestOptions || {};
    const errorMessageMode = requestOptions?.errorMessageMode;
    if (res.data.ErrCode) {
      switch (res.data.ErrCode) {
        case 10101:
          ElError('账号或密码错误');
          break;
        case 1701:
          ElError('串口通信超时');
          break;
        case 1702:
          ElError('串口忙');
          break;
        case 1703:
          ElError('串口请求数据错误');
          break;
        case 1705:
          ElError('锁状态错误');
          break;
        case 1706:
          ElError('mqtt消息过期');
          break;
        case 1707:
          ElError('串口效验数据错误');
          break;
        default:
          if (errorMessageMode !== 'none') {
            ElError(res.data.ErrCode + ' ' + res.data.ErrMsg);
          }
          break;
      }
      // NProgress.done();
    }
    closeLoading();
    return res;
  },

  /**
   * @description: 响应错误处理
   */
  responseInterceptorsCatch: async (error: any) => {
    const errorLogStore = useErrorLogStoreWithOut();
    errorLogStore.addAjaxErrorInfo(error);
    const { response, message, config } = error || {};
    const errorMessageMode = config?.requestOptions?.errorMessageMode || 'none';
    const msg: string = response?.data?.message ?? '网络请求错误，请重试';
    const err: string = error?.toString?.() ?? '';
    const code: number = response?.data?.code;
    // 是否为取消的请求
    let isCancel = await isRequestCanceled(config.cancelToken);
    console.log('isCancel', isCancel);
    try {
      if (response && response.status === 403) {
        // 权限不足
        ElError('账号已被禁用');
        clearAuthCache();
        // window.location.reload();
        closeLoading();
        return Promise.reject(error);
      }
      //账号密码错误
      if (response && response.status === 400 && msg === '无法使用提供的认证信息登录。') {
        ElError('账号密码错误');
        return;
      }
      //token失效后跳回登录页面
      if (response && response.status === 401) {
        ElError('token已失效,请重新登录');
        clearAuthCache();
        window.location.reload();
        return;
      }
      if (response && response.status === 500) {
        if (errorMessageMode === 'modal') {
          ElMessageBox.alert(code + ' ' + msg);
        } else if (errorMessageMode === 'notify') {
          ElNotification({
            type: 'error',
            title: err,
            message: code + ' ' + msg,
          });
        } else if (errorMessageMode === 'message') {
          //自定义错误信息
          if (response.data.errCode) {
            ElError(response.data.errMsg);
            return response;
          }
          switch (response.data.code) {
            case 1701:
              ElError('串口通信超时');
              break;
            case 1702:
              ElError('串口忙');
              break;
            case 1703:
              ElError('串口请求数据错误');
              break;
            case 1705:
              ElError('锁状态错误');
              break;
            case 1706:
              ElError('mqtt消息过期');
              break;
            case 1707:
              ElError('串口效验数据错误');
              break;
            default:
              ElError(code + ' ' + msg);
              break;
          }
        }
        closeLoading();
        return Promise.reject(error);
      }
    } catch (error) {
      // 如果是取消的，不用显示错误信息
      !isCancel && ElError(message + error);
    }

    // 如果是取消的，不用显示错误信息
    !isCancel && ElError(code + ' ' + msg + error);
    closeLoading();
    return Promise.reject(error);
  },
};

function createAxios(opt?: Partial<CreateAxiosOptions>) {
  return new VAxios(
    deepMerge(
      {
        // See https://developer.mozilla.org/en-US/docs/Web/HTTP/Authentication#authentication_schemes
        // authentication schemes，e.g: Bearer
        // authenticationScheme: 'Bearer',
        authenticationScheme: '',
        appId: globSetting.appId,
        timeout: 60 * 1000,
        // 基础接口地址
        // baseURL: globSetting.apiUrl,
        // 接口可能会有通用的地址部分，可以统一抽取出来
        urlPrefix: urlPrefix,
        headers: { 'Content-Type': ContentTypeEnum.JSON },
        // 如果是form-data格式
        // headers: { 'Content-Type': ContentTypeEnum.FORM_URLENCODED },
        // 数据处理方式
        transform,
        // 配置项，下面的选项都可以在独立的接口请求中覆盖
        requestOptions: {
          // 默认将prefix 添加到url
          joinPrefix: true,
          // 是否返回原生响应头 比如：需要获取响应头时使用该属性
          isReturnNativeResponse: false,
          // 需要对返回数据进行处理
          isTransformResponse: true,
          // post请求的时候添加参数到url
          joinParamsToUrl: false,
          // 格式化提交参数时间
          formatDate: true,
          // 消息提示类型
          errorMessageMode: 'message',
          // 接口地址
          apiUrl: globSetting.apiUrl,
          //  是否加入时间戳
          joinTime: false,
          // 忽略重复请求
          ignoreCancelToken: true,
          // 是否携带token
          withToken: true,
        },
      },
      opt || {}
    )
  );
}
export const defHttp = createAxios();

// other api url
// export const otherHttp = createAxios({
//   requestOptions: {
//     apiUrl: 'xxx',
//   },
// });
